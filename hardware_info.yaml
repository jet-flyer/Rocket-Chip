# Rocket Chip Hardware Config
# Tracks I2C addresses, pins, protocols for coding reference.
# Arduino pin numbers used; board-specific GPIO in parentheses.
# For initial MVP: Assume components with has_stemma_qt: true use STEMMA QT (Qwiic compatible) for I2C daisy-chaining. Alternate protocols available for refinement.

main_boards:
  - name: RP2350 HSTX Feather
    product_id: Adafruit 6130
    microcontroller: RP2350A
    memory: 8MB PSRAM
    interfaces:
      i2c: {bus: I2C0, sda: 28, scl: 29, notes: "Config via Wire.begin(). STEMMA QT default."}
      spi: {bus: SPI0, mosi: 19, miso: 16, sck: 18, notes: "Avoid PSRAM conflict."}
      uart: {bus: UART0, tx: 0, rx: 1, notes: "Config via UART class."}
    sensor_hubs:
      stemma_qt: {sda: 28, scl: 29, notes: "I2C hub, Qwiic compatible, daisy-chain sensors."}
    onboard_components:
      led: {pin: 13, notes: "Red LED for indicators."}
      neopixel: {pin: 23, notes: "RGB LED for status."}
    notes: "Dual Cortex-M33/RISC-V, 150 MHz. 30 GPIO, 4 ADC. Leakage on Bank 0 (~120 Î¼A); use pull resistors. Debug with Adafruit 5699."

  - name: ESP32-S3 Reverse TFT
    product_id: Adafruit 5691
    microcontroller: ESP32-S3
    memory: 8MB Flash, 2MB PSRAM
    interfaces:
      i2c: {bus: I2C0, sda: 8, scl: 9, notes: "Config via Wire.begin(). TFT may use 8/9; reassign if needed."}
      spi: {bus: VSPI, mosi: 11, miso: 13, sck: 12, notes: "SPI0/SPI1 for flash; use VSPI/HSPI."}
      uart: {bus: UART0, tx: 43, rx: 44, notes: "Reassignable via HardwareSerial."}
    sensor_hubs:
      stemma_qt: {sda: 8, scl: 9, notes: "I2C hub, Qwiic compatible, daisy-chain sensors."}
    onboard_components:
      led: {pin: 13, notes: "Red LED for indicators."}
      neopixel: {pin: 21, notes: "RGB LED for status."}
      tft: {sck: 12, mosi: 11, dc: 38, cs: 39, rst: 40, backlight: 45, notes: "1.54in 240x240 IPS display via SPI."}
    notes: "Dual Xtensa LX7, 240 MHz, Wi-Fi/BT. Avoid GPIO 6-11 (flash). ADC2 off with Wi-Fi. Debug with Adafruit 5699."

default_sensors:
  - name: DPS310 Barometer
    product_id: Adafruit 4494
    i2c_address: {default: 0x77, alternate: 0x76}
    connector: STEMMA QT
    has_stemma_qt: true
    alternate_protocols: [SPI]
    notes: "Use Adafruit_DPS310 lib. Check address conflicts. Pull-ups on STEMMA QT."

  - name: ICM20948 9-DoF
    product_id: Adafruit 4554
    i2c_address: {default: 0x68, alternate: 0x69}
    connector: STEMMA QT
    has_stemma_qt: true
    alternate_protocols: [SPI]
    notes: "Use Adafruit_ICM20948 lib. Set ADDR jumper. Calibrate magnetometer."

peripherals:
  - name: Mini GPS PA1010D
    product_id: Adafruit 4415
    interface: UART
    pins: {tx: UART0_TX, rx: UART0_RX}
    connector: STEMMA QT
    protocols: [UART, I2C: 0x10]
    has_stemma_qt: true
    alternate_protocols: [I2C: 0x10]  # Can daisy-chain via I2C for MVP
    notes: "Use Adafruit_GPS lib. UART default (9600 baud). Ensure 3.3V, antenna."

  - name: Ultimate GPS FeatherWing
    product_id: Adafruit 3133
    interface: UART
    pins: {tx: UART0_TX, rx: UART0_RX}
    connector: FeatherWing
    protocols: [UART, I2C: 0x10]
    has_stemma_qt: false
    alternate_protocols: [I2C: 0x10]  # Can use I2C with manual wiring
    notes: "Use Adafruit_GPS lib. UART default. Check UART conflicts. FeatherWing pins, no STEMMA QT."

  - name: RFM69HCW Radio FeatherWing
    product_id: Adafruit 3229
    interface: SPI
    pins:
      cs: A (10) # RP2350: GPIO22, ESP32-S3: GPIO10
      irq: B (6) # RP2350: GPIO18, ESP32-S3: GPIO6
      rst: C (5) # RP2350: GPIO17, ESP32-S3: GPIO5
      sck: SPI0_SCK # RP2350: GPIO18, ESP32-S3: GPIO12
      mosi: SPI0_MOSI # RP2350: GPIO19, ESP32-S3: GPIO11
      miso: SPI0_MISO # RP2350: GPIO16, ESP32-S3: GPIO13
    connector: FeatherWing
    protocols: [SPI]
    has_stemma_qt: false
    notes: "915MHz. Solder A (CS), B (IRQ), C (RST) per guide. Use RadioHead lib. Verify IRQ pin, SPI pins (D6/SCK overlap on RP2350). Debug with Adafruit 5699."

actuators:
  - name: Pyro Trigger (SSR)
    product_id: TBD
    interface: GPIO
    pins: {trigger: 2} # RP2350: GPIO2, ESP32-S3: GPIO2
    protocols: [Digital, PWM]
    has_stemma_qt: false
    notes: "SSR with screw terminal for charges. Use digitalWrite(). Add pull-down. RTOS for timing in Pro."

future_sensors:
  - name: High-Perf Accelerometer
    product_id: TBD
    interface: I2C/SPI
    i2c_address: TBD
    connector: STEMMA QT
    has_stemma_qt: true
    alternate_protocols: [SPI]
    notes: "For Pro, 16-bit. SPI for high data rates."

compatibility_notes:
  i2c: "RP2350: 2 buses, STEMMA QT on I2C0. ESP32-S3: GPIO8/9 may conflict with TFT. Use I2C scanner."
  spi: "RP2350: Avoid PSRAM conflict; check D6/SCK overlap. ESP32-S3: Use VSPI/HSPI. RFM69HCW: Currently configured for M0 board, use as-is if possible but can re-wire configurable GPIO as needed per user guide."
  uart: "Reserve UART0 for debug. Reassignable."
  gpio: "RP2350: Avoid floating inputs (leakage). ESP32-S3: Avoid GPIO 6-11, strapping pins (0, 45)."
  power: "400mAh Li-ion (Adafruit 3898). Ensure 3.3V for sensors, SSR."
  debug: "Use Adafruit 5699 for JTAG/SWD. RP2350: UF2 boot. ESP32-S3: BOOT pin high."